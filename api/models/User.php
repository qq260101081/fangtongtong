<?php
namespace api\models;

use common\models\Base;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\web\IdentityInterface;

class User extends Base implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;

    public static function tableName()
    {
        return '{{%user}}';
    }


    public function rules()
    {
        return [
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
        ];
    }




    public static function findIdentityByAccessToken($token, $type = null)
    {
        $userId = (int)Yii::$app->redis->get('login:'.$token);

        return static::findOne(['user_id' => $userId, 'status' => self::STATUS_ACTIVE]);
    }


    public static function findByPhone($phone = null)
    {
        return static::findOne(['phone' => $phone, 'status' => self::STATUS_ACTIVE])->toArray();
    }

    public static function findByPassword($phone = '', $password = '')
    {
        $user = static::findOne(['phone' => $phone, 'status' => self::STATUS_ACTIVE])->toArray();

        if (!$user)
        {
            return false;
        }

        return Yii::$app->security->validatePassword($password, $user['password']) ? $user : false;
    }

    /**
     * 密码转哈希
     * @param string $password
     * @return string
     * @throws \yii\base\Exception
     */
    public static function setPassword($password = '')
    {
        return Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * 生成 access_token
     * @param string $userId
     * @return string
     * @throws \yii\base\Exception
     */
    public static function generateAccessToken($userId = '')
    {
        $accessToken = Yii::$app->security->generateRandomString();

        $key = 'login:' . $accessToken;
        Yii::$app->redis->set($key, $userId);
        Yii::$app->redis->expire($key, Yii::$app->params['user.accessTokenExpire']);

        return $accessToken;
    }


    /**
     * 用户ID生成邀请码
     * @param $user_id
     * @return string
     */
    public static function createInviteCode($user_id) {
        static $source_string = 'E5FCDG3HQA4B1NOPIJ2RSTUV67MWX89KLYZ';
        $num = $user_id;
        $code = '';
        while ( $num > 0) {
            $mod = $num % 35;
            $num = ($num - $mod) / 35;
            $code = $source_string[$mod].$code;
        }
        if(empty($code[3]))
            $code = str_pad($code,4,'0',STR_PAD_LEFT);
        return $code;
    }

    /**
     * 邀请码解出用户ID
     * @param $code
     * @return float|int
     */
    public static function inviteDecode($code) {
        static $source_string = 'E5FCDG3HQA4B1NOPIJ2RSTUV67MWX89KLYZ';
        if (strrpos($code, '0') !== false)
            $code = substr($code, strrpos($code, '0')+1);
        $len = strlen($code);
        $code = strrev($code);
        $num = 0;
        for ($i=0; $i < $len; $i++) {
            $num += strpos($source_string, $code[$i]) * pow(35, $i);
        }
        return $num;
    }


    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    public function getId()
    {
        return $this->getPrimaryKey();
    }

    public function getAuthKey()
    {
        return $this->token;
    }

    public function validateAuthKey($token)
    {
        return $this->getAuthKey() === $token;
    }

    /**
     * 返回字段重定义
     * @return array|false
     */
    public function fields()
    {
        $fields = parent::fields(); // TODO: Change the autogenerated stub
        return $fields;
    }

    public function attributeLabels()
    {
        return [
            'phone' => '手机号'
        ];
    }

}
